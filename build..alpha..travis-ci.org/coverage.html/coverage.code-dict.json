{"/home/travis/build/npmtest/node-npmtest-passport-http/test.js":"/* istanbul instrument in package npmtest_passport_http */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-passport-http/lib.npmtest_passport_http.js":"/* istanbul instrument in package npmtest_passport_http */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_passport_http = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_passport_http = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-passport-http/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-passport-http && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_passport_http */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_passport_http\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_passport_http.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_passport_http.rollup.js'] =\n            local.assetsDict['/assets.npmtest_passport_http.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_passport_http.__dirname + '/lib.npmtest_passport_http.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-passport-http/node_modules/passport-http/lib/passport-http/index.js":"/**\n * Module dependencies.\n */\nvar BasicStrategy = require('./strategies/basic');\nvar DigestStrategy = require('./strategies/digest');\n\n/**\n * Export constructors.\n */\nexports.BasicStrategy = BasicStrategy;\nexports.DigestStrategy = DigestStrategy;\n","/home/travis/build/npmtest/node-npmtest-passport-http/node_modules/passport-http/lib/passport-http/strategies/basic.js":"/**\n * Module dependencies.\n */\nvar passport = require('passport-strategy')\n  , util = require('util');\n\n\n/**\n * `BasicStrategy` constructor.\n *\n * The HTTP Basic authentication strategy authenticates requests based on\n * userid and password credentials contained in the `Authorization` header\n * field.\n *\n * Applications must supply a `verify` callback which accepts `userid` and\n * `password` credentials, and then calls the `done` callback supplying a\n * `user`, which should be set to `false` if the credentials are not valid.\n * If an exception occured, `err` should be set.\n *\n * Optionally, `options` can be used to change the authentication realm.\n *\n * Options:\n *   - `realm`  authentication realm, defaults to \"Users\"\n *\n * Examples:\n *\n *     passport.use(new BasicStrategy(\n *       function(userid, password, done) {\n *         User.findOne({ username: userid, password: password }, function (err, user) {\n *           done(err, user);\n *         });\n *       }\n *     ));\n *\n * For further details on HTTP Basic authentication, refer to [RFC 2617: HTTP Authentication: Basic and Digest Access Authentication](http://tools.ietf.org/html/rfc2617)\n *\n * @param {Object} options\n * @param {Function} verify\n * @api public\n */\nfunction BasicStrategy(options, verify) {\n  if (typeof options == 'function') {\n    verify = options;\n    options = {};\n  }\n  if (!verify) throw new Error('HTTP Basic authentication strategy requires a verify function');\n  \n  passport.Strategy.call(this);\n  this.name = 'basic';\n  this._verify = verify;\n  this._realm = options.realm || 'Users';\n  this._passReqToCallback = options.passReqToCallback;\n}\n\n/**\n * Inherit from `passport.Strategy`.\n */\nutil.inherits(BasicStrategy, passport.Strategy);\n\n/**\n * Authenticate request based on the contents of a HTTP Basic authorization\n * header.\n *\n * @param {Object} req\n * @api protected\n */\nBasicStrategy.prototype.authenticate = function(req) {\n  var authorization = req.headers['authorization'];\n  if (!authorization) { return this.fail(this._challenge()); }\n  \n  var parts = authorization.split(' ')\n  if (parts.length < 2) { return this.fail(400); }\n  \n  var scheme = parts[0]\n    , credentials = new Buffer(parts[1], 'base64').toString().split(':');\n\n  if (!/Basic/i.test(scheme)) { return this.fail(this._challenge()); }\n  if (credentials.length < 2) { return this.fail(400); }\n  \n  var userid = credentials[0];\n  var password = credentials[1];\n  if (!userid || !password) {\n    return this.fail(this._challenge());\n  }\n  \n  var self = this;\n  \n  function verified(err, user) {\n    if (err) { return self.error(err); }\n    if (!user) { return self.fail(self._challenge()); }\n    self.success(user);\n  }\n  \n  if (self._passReqToCallback) {\n    this._verify(req, userid, password, verified);\n  } else {\n    this._verify(userid, password, verified);\n  }\n}\n\n/**\n * Authentication challenge.\n *\n * @api private\n */\nBasicStrategy.prototype._challenge = function() {\n  return 'Basic realm=\"' + this._realm + '\"';\n}\n\n\n/**\n * Expose `BasicStrategy`.\n */ \nmodule.exports = BasicStrategy;\n","/home/travis/build/npmtest/node-npmtest-passport-http/node_modules/passport-http/lib/passport-http/strategies/digest.js":"/**\n * Module dependencies.\n */\nvar passport = require('passport-strategy')\n  , crypto = require('crypto')\n  , util = require('util');\n\n\n/**\n * `DigestStrategy` constructor.\n *\n * The HTTP Digest authentication strategy authenticates requests based on\n * username and digest credentials contained in the `Authorization` header\n * field.\n *\n * Applications must supply a `secret` callback, which is used to look up the\n * user and corresponding password (aka shared secret) known to both the server\n * and the client, supplying them to the `done` callback as `user` and\n *`password`, respectively.  The strategy will use the password to compute the\n * response hash, failing authentication if it does not match that found in the\n * request. If the username is not valid, `user` should be set to false.  If an\n * exception occured, `err` should be set.\n *\n * An optional `validate` callback can be supplied, which receives `params`\n * containing nonces that the server may want to track and validate.\n *\n * Options:\n *   - `realm`      authentication realm, defaults to \"Users\"\n *   - `domain`     list of URIs that define the protection space\n *   - `algorithm`  algorithm used to produce the digest (MD5 | MD5-sess)\n *   - `qop`        list of quality of protection values support by the server (auth | auth-int) (recommended: auth)\n *\n * `validate` params:\n *   - `nonce`   unique string value specified by the server\n *   - `cnonce`  opaque string value provided by the client\n *   - `nc`      count of the number of requests (including the current request) that the client has sent with the nonce value\n *   - `opaque`  string of data, specified by the server, which should be returned by the client in subsequent requests\n *\n * Examples:\n *\n *     passport.use(new DigestStrategy({ qop: 'auth' },\n *       function(username, done) {\n *         // secret callback\n *         User.findOne({ username: username }, function (err, user) {\n *           if (err) { return done(err); }\n *           return done(null, user, user.password);\n *         });\n *       },\n *       function(params, done) {\n *         // validate callback, check nonces in params...\n *         done(err, true);\n *       }\n *     ));\n *\n * For further details on HTTP Basic authentication, refer to [RFC 2617: HTTP Authentication: Basic and Digest Access Authentication](http://tools.ietf.org/html/rfc2617)\n *\n * @param {Object} options\n * @param {Function} secret\n * @param {Function} validate\n * @api public\n */\nfunction DigestStrategy(options, secret, validate) {\n  if (typeof options == 'function') {\n    validate = secret;\n    secret = options;\n    options = {};\n  }\n  if (!secret) throw new Error('HTTP Digest authentication strategy requires a secret function');\n  \n  passport.Strategy.call(this);\n  this.name = 'digest';\n  this._secret = secret;\n  this._validate = validate;\n  this._realm = options.realm || 'Users';\n  if (options.domain) {\n    this._domain = (Array.isArray(options.domain)) ? options.domain : [ options.domain ];\n  }\n  this._opaque = options.opaque;\n  this._algorithm = options.algorithm;\n  if (options.qop) {\n    this._qop = (Array.isArray(options.qop)) ? options.qop : [ options.qop ];\n  }\n}\n\n/**\n * Inherit from `passport.Strategy`.\n */\nutil.inherits(DigestStrategy, passport.Strategy);\n\n/**\n * Authenticate request based on the contents of a HTTP Digest authorization\n * header.\n *\n * @param {Object} req\n * @api protected\n */\nDigestStrategy.prototype.authenticate = function(req) {\n  var authorization = req.headers['authorization'];\n  if (!authorization) { return this.fail(this._challenge()); }\n  \n  var parts = authorization.split(' ')\n  if (parts.length < 2) { return this.fail(400); }\n  \n  var scheme = parts[0]\n    , params = parts.slice(1).join(' ');\n  \n  if (!/Digest/i.test(scheme)) { return this.fail(this._challenge()); }\n  \n  var creds = parse(params);\n  if (Object.keys(creds).length === 0) { return this.fail(400); }\n  \n  if (!creds.username) {\n    return this.fail(this._challenge());\n  }\n  if (req.url !== creds.uri) {\n    return this.fail(400);\n  }\n  \n  \n  var self = this;\n  \n  // Use of digest authentication requires a password (aka shared secret) known\n  // to both the client and server, but not transported over the wire.  This\n  // secret is needed in order to compute the hashes required to authenticate\n  // the request, and can be obtained by calling the secret() function the\n  // application provides to the strategy.  Because username is the key for a\n  // database query, a `user` instance is also obtained from this callback.\n  // However, the user will only be successfully authenticated if the password\n  // is correct, as indicated by the challenge response matching the computed\n  // value.\n  this._secret(creds.username, function(err, user, password) {\n    if (err) { return self.error(err); }\n    if (!user) { return self.fail(self._challenge()); }\n    \n    var ha1;\n    if (!creds.algorithm || creds.algorithm === 'MD5') {\n      if (typeof password === 'object' && password.ha1) {\n        ha1 = password.ha1;\n      } else  {\n        ha1 = md5(creds.username + \":\" + creds.realm + \":\" + password);\n      }\n    } else if (creds.algorithm === 'MD5-sess') {\n      // TODO: The nonce and cnonce used here should be the initial nonce\n      //       value generated by the server and the first nonce value used by\n      //       the client.  This creates a 'session key' for the authentication\n      //       of subsequent requests.  The storage of the nonce values and the\n      //       resulting session key needs to be investigated.\n      //\n      //       See RFC 2617 (Section 3.2.2.2) for further details.\n      ha1 = md5(md5(creds.username + \":\" + creds.realm + \":\" + password) + \":\" + creds.nonce + \":\" + creds.cnonce);\n    } else {\n      return self.fail(400);\n    }\n    \n    var ha2;\n    if (!creds.qop || creds.qop === 'auth') {\n      ha2 = md5(req.method + \":\" + creds.uri);\n    } else if (creds.qop === 'auth-int') {\n      // TODO: Implement support for auth-int.  Note that the raw entity body\n      //       will be needed, not the parsed req.body property set by Connect's\n      //       bodyParser middleware.\n      //\n      //       See RFC 2617 (Section 3.2.2.3 and Section 3.2.2.4) for further\n      //       details.\n      return self.error(new Error('auth-int not implemented'));\n    } else {\n      return self.fail(400);\n    }\n    \n    var digest;\n    if (!creds.qop) {\n      digest = md5(ha1 + \":\" + creds.nonce + \":\" + ha2);\n    } else if (creds.qop === 'auth' || creds.qop === 'auth-int') {\n      digest = md5(ha1 + \":\" + creds.nonce + \":\" + creds.nc + \":\" + creds.cnonce + \":\" + creds.qop + \":\" + ha2);\n    } else {\n      return self.fail(400);\n    }\n    \n    if (creds.response != digest) {\n      return self.fail(self._challenge());\n    } else {\n      if (self._validate) {\n        self._validate({\n            nonce: creds.nonce,\n            cnonce: creds.cnonce,\n            nc: creds.nc,\n            opaque: creds.opaque\n          },\n          function(err, valid) {\n            if (err) { return self.error(err); }\n            if (!valid) { return self.fail(self._challenge()); }\n            self.success(user);\n          });\n      } else {\n        self.success(user);\n      }\n    }\n  });\n}\n\n/**\n * Authentication challenge.\n *\n * @api private\n */\nDigestStrategy.prototype._challenge = function() {\n  // TODO: For maximum flexibility, a mechanism for delegating the generation\n  //       of the nonce and opaque data to the application would be useful.\n  \n  var challenge = 'Digest realm=\"' + this._realm + '\"';\n  if (this._domain) {\n    challenge += ', domain=\"' + this._domain.join(' ') + '\"';\n  }\n  challenge += ', nonce=\"' + nonce(32) + '\"';\n  if (this._opaque) {\n    challenge += ', opaque=\"' + this._opaque + '\"';\n  }\n  if (this._algorithm) {\n    challenge += ', algorithm=' + this._algorithm;\n  }\n  if (this._qop) {\n    challenge += ', qop=\"' + this._qop.join(',') + '\"';\n  }\n  \n  return challenge;\n}\n\n\n/**\n * Parse authentication response.\n *\n * @api private\n */\nfunction parse(params) {\n  var opts = {};\n  var tokens = params.split(/,(?=(?:[^\"]|\"[^\"]*\")*$)/);\n  for (var i = 0, len = tokens.length; i < len; i++) {\n    var param = /(\\w+)=[\"]?([^\"]+)[\"]?$/.exec(tokens[i])\n    if (param) {\n      opts[param[1]] = param[2];\n    }\n  }\n  return opts;\n}\n\n/**\n * Return a unique nonce with the given `len`.\n *\n *     utils.uid(10);\n *     // => \"FDaS435D2z\"\n *\n * CREDIT: Connect -- utils.uid\n *         https://github.com/senchalabs/connect/blob/1.7.1/lib/utils.js\n *\n * @param {Number} len\n * @return {String}\n * @api private\n */\nfunction nonce(len) {\n  var buf = []\n    , chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'\n    , charlen = chars.length;\n\n  for (var i = 0; i < len; ++i) {\n    buf.push(chars[Math.random() * charlen | 0]);\n  }\n\n  return buf.join('');\n};\n\n\n/**\n * Return md5 hash of the given string and optional encoding,\n * defaulting to hex.\n *\n *     utils.md5('wahoo');\n *     // => \"e493298061761236c96b02ea6aa8a2ad\"\n *\n * CREDIT: Connect -- utils.md5\n *         https://github.com/senchalabs/connect/blob/1.7.1/lib/utils.js\n *\n * @param {String} str\n * @param {String} encoding\n * @return {String}\n * @api private\n */\nfunction md5(str, encoding){\n  return crypto\n    .createHash('md5')\n    .update(str)\n    .digest(encoding || 'hex');\n};\n\n\n/**\n * Expose `DigestStrategy`.\n */ \nmodule.exports = DigestStrategy;\n"}